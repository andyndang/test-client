"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .account import Account
from .admin import Admin
from .apikey import APIKey
from .azure_marketplace import AzureMarketplace
from .dataset_metadata import DatasetMetadata
from .datasetprofile import DatasetProfile
from .debugevents import DebugEvents
from .feature_weights import FeatureWeights
from .featureflags import FeatureFlags
from .internal import Internal
from .log import Log
from .membership import Membership
from .models_ import Models
from .monitor import Monitor
from .monitor_diagnostics import MonitorDiagnostics
from .notification_settings import NotificationSettings
from .organizations import Organizations
from .payment import Payment
from .provision import Provision
from .schema import Schema
from .sdkconfiguration import SDKConfiguration
from .search import Search
from .sessions import Sessions
from .subscription import Subscription
from .traces import Traces
from .transactions import Transactions
from .user import User
from typing import Callable, Dict, Optional, Union
from whylabs_client import utils
from whylabs_client._hooks import SDKHooks
from whylabs_client.models import components

class WhylabsClient:
    r"""WhyLabs Songbird: WhyLabs API that enables end-to-end AI observability"""
    account: Account
    r"""Endpoint for account provisioning"""
    internal: Internal
    r"""Internal API"""
    admin: Admin
    r"""Endpoint for admin operations"""
    feature_flags: FeatureFlags
    r"""Endpoint for feature flags"""
    membership: Membership
    r"""Endpoint for organization user membership"""
    notification_settings: NotificationSettings
    r"""TODO"""
    organizations: Organizations
    r"""Interactions related to organizations."""
    api_key: APIKey
    r"""API key management."""
    dataset_profile: DatasetProfile
    r"""Endpoint for access dataset profiles"""
    dataset_metadata: DatasetMetadata
    r"""Endpoint for dataset metadata."""
    feature_weights: FeatureWeights
    r"""Endpoint for feature weights"""
    debug_events: DebugEvents
    r"""Endpoint for debug events"""
    monitor_diagnostics: MonitorDiagnostics
    r"""Endpoint for monitor diagnostics"""
    log: Log
    r"""Endpoint for logging dataset profiles"""
    models: Models
    r"""Interactions related to models."""
    monitor: Monitor
    r"""Interactions related to monitors."""
    schema: Schema
    r"""Schema management."""
    payment: Payment
    r"""Endpoint for payment webhooks"""
    provision: Provision
    r"""Endpoint for creating sets of resources."""
    search: Search
    r"""Endpoint for search operations"""
    sessions: Sessions
    r"""Interactions related to sessions."""
    subscription: Subscription
    r"""Endpoint for subscription operations"""
    user: User
    r"""Endpoint for users"""
    azure_marketplace: AzureMarketplace
    r"""Endpoint for Azure Marketplace webhooks"""
    traces: Traces
    r"""Endpoint for ingesting spans and traces"""
    transactions: Transactions
    r"""Endpoint for log transactions"""

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 api_key_auth: Union[Optional[str], Callable[[], Optional[str]]] = None,
                 server_idx: Optional[int] = None,
                 server_url: Optional[str] = None,
                 url_params: Optional[Dict[str, str]] = None,
                 client: Optional[requests_http.Session] = None,
                 retry_config: Optional[utils.RetryConfig] = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.

        :param api_key_auth: The api_key_auth required for authentication
        :type api_key_auth: Union[Optional[str], Callable[[], Optional[str]]]
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: Dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session
        :param retry_config: The utils.RetryConfig to use globally
        :type retry_config: utils.RetryConfig
        """
        if client is None:
            client = requests_http.Session()

        if callable(api_key_auth):
            def security():
                return components.Security(api_key_auth = api_key_auth())
        else:
            security = components.Security(api_key_auth = api_key_auth)

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        self.sdk_configuration = SDKConfiguration(
            client,
            security,
            server_url,
            server_idx,
            retry_config=retry_config
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(current_server_url, self.sdk_configuration.client)
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration._hooks = hooks

        self._init_sdks()


    def _init_sdks(self):
        self.account = Account(self.sdk_configuration)
        self.internal = Internal(self.sdk_configuration)
        self.admin = Admin(self.sdk_configuration)
        self.feature_flags = FeatureFlags(self.sdk_configuration)
        self.membership = Membership(self.sdk_configuration)
        self.notification_settings = NotificationSettings(self.sdk_configuration)
        self.organizations = Organizations(self.sdk_configuration)
        self.api_key = APIKey(self.sdk_configuration)
        self.dataset_profile = DatasetProfile(self.sdk_configuration)
        self.dataset_metadata = DatasetMetadata(self.sdk_configuration)
        self.feature_weights = FeatureWeights(self.sdk_configuration)
        self.debug_events = DebugEvents(self.sdk_configuration)
        self.monitor_diagnostics = MonitorDiagnostics(self.sdk_configuration)
        self.log = Log(self.sdk_configuration)
        self.models = Models(self.sdk_configuration)
        self.monitor = Monitor(self.sdk_configuration)
        self.schema = Schema(self.sdk_configuration)
        self.payment = Payment(self.sdk_configuration)
        self.provision = Provision(self.sdk_configuration)
        self.search = Search(self.sdk_configuration)
        self.sessions = Sessions(self.sdk_configuration)
        self.subscription = Subscription(self.sdk_configuration)
        self.user = User(self.sdk_configuration)
        self.azure_marketplace = AzureMarketplace(self.sdk_configuration)
        self.traces = Traces(self.sdk_configuration)
        self.transactions = Transactions(self.sdk_configuration)
