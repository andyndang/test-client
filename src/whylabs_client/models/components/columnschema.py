"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from typing import List, Optional
from whylabs_client import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ColumnSchema:
    r"""Column schema for a given column"""
    UNSET='__SPEAKEASY_UNSET__'
    classifier: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classifier') }})
    r"""We can classify these columns into various grouping. Currently we only support 'input' and 'output'"""
    data_type: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataType') }})
    r"""The data type of the columns. Setting this field affects the default grouping (i.e integral columns)"""
    discreteness: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discreteness') }})
    r"""Whether a column should be discrete or continuous. Changing this column will change the default grouping (discrete columns vs. continuous columns"""
    tags: Optional[List[str]] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is ColumnSchema.UNSET }})
    r"""Metadata tags for the column schema information"""
    

