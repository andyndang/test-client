"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .notificationsqsmessagecadence import NotificationSqsMessageCadence
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Optional
from whylabs_client import utils

class DayOfWeek(str, Enum):
    SUNDAY = 'SUNDAY'
    MONDAY = 'MONDAY'
    TUESDAY = 'TUESDAY'
    WEDNESDAY = 'WEDNESDAY'
    THURSDAY = 'THURSDAY'
    FRIDAY = 'FRIDAY'
    SATURDAY = 'SATURDAY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UberNotificationSchedule:
    r"""Combination of all possible schedule types, a hacky workaround for bugs in generated clients that use polymorphic types.
    There are three types of schedules. Weekly, Daily, and Individual. You need to set the right fields for each one.

    Weekly:
        enabled, cadence=WEEKLY, dayOfWeek, local24HourOfDay, localMinuteOfHour, localTimezone

    Daily:
        enabled, cadence=DAILY, local24HourOfDay, localMinuteOfHour, localTimezone

    Individual:
        enabled, cadence=INDIVIDUAL
    """
    UNSET='__SPEAKEASY_UNSET__'
    enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled') }})
    cadence: NotificationSqsMessageCadence = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cadence') }})
    day_of_week: Optional[DayOfWeek] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayOfWeek'), 'exclude': lambda f: f is UberNotificationSchedule.UNSET }})
    local24_hour_of_day: Optional[int] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('local24HourOfDay'), 'exclude': lambda f: f is UberNotificationSchedule.UNSET }})
    local_minute_of_hour: Optional[int] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localMinuteOfHour'), 'exclude': lambda f: f is UberNotificationSchedule.UNSET }})
    local_timezone: Optional[str] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localTimezone'), 'exclude': lambda f: f is UberNotificationSchedule.UNSET }})
    

