"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .columnschema import ColumnSchema
from .metricschema import MetricSchema
from dataclasses_json import Undefined, dataclass_json
from typing import Dict, Optional
from whylabs_client import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntitySchemaMetadata:
    r"""Metadata for entity schema information"""
    author: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('author') }})
    version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    updated_timestamp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedTimestamp'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntitySchema:
    r"""Entity schema for a dataset"""
    UNSET='__SPEAKEASY_UNSET__'
    columns: Dict[str, ColumnSchema] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columns') }})
    r"""Column schema for a given column"""
    metadata: Optional[EntitySchemaMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    metrics: Optional[Dict[str, MetricSchema]] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metrics'), 'exclude': lambda f: f is EntitySchema.UNSET }})
    r"""Schema for user-defined metrics (map of unique custom metric labels to their definitions)"""
    

