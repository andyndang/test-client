"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ...models.components import httpmetadata as components_httpmetadata
from ...models.components import userapikey as components_userapikey
from typing import List, Optional


@dataclasses.dataclass
class CreateAPIKeyRequest:
    UNSET='__SPEAKEASY_UNSET__'
    org_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'org_id', 'style': 'simple', 'explode': False }})
    r"""Your company's unique organization ID"""
    user_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'user_id', 'style': 'form', 'explode': True }})
    r"""The unique user ID in an organization."""
    expiration_time: Optional[int] = dataclasses.field(default=UNSET, metadata={'query_param': { 'field_name': 'expiration_time', 'style': 'form', 'explode': True }})
    r"""Expiration time in epoch milliseconds"""
    scopes: Optional[List[str]] = dataclasses.field(default=UNSET, metadata={'query_param': { 'field_name': 'scopes', 'style': 'form', 'explode': True }})
    r"""Scopes of the token"""
    alias: Optional[str] = dataclasses.field(default=UNSET, metadata={'query_param': { 'field_name': 'alias', 'style': 'form', 'explode': True }})
    r"""A human-friendly name for the API Key"""
    



@dataclasses.dataclass
class CreateAPIKeyResponse:
    http_meta: components_httpmetadata.HTTPMetadata = dataclasses.field()
    user_api_key: Optional[components_userapikey.UserAPIKey] = dataclasses.field(default=None)
    r"""A object with key ID and other metadata about the key"""
    

